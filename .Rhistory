# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^2 + team, data = football_managers_seasons)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^2 + team + season, data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^2 + team + team:points_lastseason, data = football_managers_seasons)
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^2 + team + team:points_lastseason, data = football_managers_seasons)
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^2 + team + team:points_lastseason, data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^2 + team, data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team*points_lastseason , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team^2 , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team + caretaker + promoted , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
View(football_managers_2018_season)
View(football_managers_2018)
# Example: aggregate data and keep only one entry - you may add further variables here
football_managers_seasons <- group_by(football_managers_merged, season, team) %>%
reframe(
points = sum(points),
goals = sum(goals),
promoted = mean(promoted),
goals_opponent = sum(goals_opponent),
points_lastseason = mean(points_lastseason),
team = first(team),
caretaker = mean(caretaker)
manager = manager_id
# Example: aggregate data and keep only one entry - you may add further variables here
football_managers_seasons <- group_by(football_managers_merged, season, team) %>%
reframe(
points = sum(points),
goals = sum(goals),
promoted = mean(promoted),
goals_opponent = sum(goals_opponent),
points_lastseason = mean(points_lastseason),
team = first(team),
caretaker = mean(caretaker)
manager = manager_name
# Example: aggregate data and keep only one entry - you may add further variables here
football_managers_seasons <- group_by(football_managers_merged, season, team) %>%
reframe(
points = sum(points),
goals = sum(goals),
promoted = mean(promoted),
goals_opponent = sum(goals_opponent),
points_lastseason = mean(points_lastseason),
team = first(team),
caretaker = mean(caretaker),
manager = manager_name
) %>%
as.data.frame()
# let's ensure it's unique
football_managers_seasons <- data.frame(unique(football_managers_seasons))
# Obtain an overview of all variables, including summary statistics
summary(football_managers_seasons)
# Correlation matrix for numeric and binary dummy coded variables (you can consider removing variables that are not interesting)
round(cor(football_managers_seasons %>% select_if(is.numeric)),2)
# Let's take a look at our outcome variable using histograms (log-transformed versus not)
hist(football_managers_seasons$points)
hist(log(football_managers_seasons$points))
# Let's check qq-plots oo
qqnorm(football_managers_seasons$points)
qqline(football_managers_seasons$points)
qqnorm(log(football_managers_seasons$points))
qqline(log(football_managers_seasons$points))
# Try your own model - decide which variables to include
model_e1.fit <- lm(points ~., data=football_managers_seasons)
summary(model_e1.fit)
model_e2.fit <- lm(points ~.^2, data=football_managers_seasons)
summary(model_e2.fit)
football_managers_seasons$
######
# Example:
ols.fit1 <- lm(points ~ points_lastseason, data=football_managers_seasons)
#####################
colnames(football_managers_seasons) <- make.names(colnames(football_managers_seasons))
# Full model with all predictor variables
current_model <- lm(points ~.^2, data = football_managers_seasons)
current_adj_r_squared <- summary(current_model)$adj.r.squared
# Ensure valid column names
colnames(football_managers_seasons) <- make.names(colnames(football_managers_seasons))
# Fit the full model with all predictor variables
full_model <- lm(points ~(.)^2, data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
###########################
# Example:
ols.fit2 <- lm(points~ points_lastseason, data=football_managers_seasons)
summary(ols.fit2)
# We can also compare adjusted R2 with AIC (both have a penalty for overfitting)
AIC(ols.fit2)
## Manual calculation for lm object - note: AIC for the lm actually adds an extra parameter for the constant term (hence the +1 at the end)
nrow(football_managers_seasons)*(log(2*pi) + 1 + log((sum(ols.fit2$residuals^2)/nrow(football_managers_seasons)))) + ((length(ols.fit2$coefficients)+1)*2)
# Just in case: Stepwise optimisation also works for OLS
# Using stepwise AIC selection (forward, backward, both directions) from MASS library
selected.ols.fit2 <-stepAIC(ols.fit2)
summary(selected.ols.fit2)
AIC(selected.ols.fit2)
# Repeat data preparation for the 2018 data set
football_managers_2018 <- read_csv("football_managers_week1_2018.csv")
# Encode naming columns
Encoding(football_managers_2018$manager_name)
football_managers_merged$manager_2018 <-  iconv(football_managers_merged$manager_name, to='UTF-8')
# create dummy if team is new in premier league
football_managers_2018$promoted <-  ifelse(is.na(football_managers_2018$points_lastseason),1, 0)
# replace missing values NA from points last season with 0 (these are teams that got promoted to the premier league)
football_managers_2018$points_lastseason <- ifelse(is.na(football_managers_2018$points_lastseason), 0, football_managers_2018$points_lastseason)
# Encode naming columns
Encoding(football_managers_2018$manager_name)
football_managers_2018$manager_name <-  iconv(football_managers_2018$manager_name, to='UTF-8')
# We can create new variables, for example, a dummy indicating whether team is new in the premier league
football_managers_2018$promoted <-  ifelse(is.na(football_managers_2018$points_lastseason),1, 0)
# check frequency of new variable
table(football_managers_2018$promoted)
# We could also properly format the dates again
football_managers_2018$date_from <-  as.Date(football_managers_2018$date_from, format = "%d-%b-%y")
football_managers_2018$date_until <- as.Date(football_managers_2018$date_until, format = "%d-%b-%y")
football_managers_2018$date <- as.Date(football_managers_2018$date, format = "%d/%m/%Y")
# Aggregate data for 2018
# Don't forget to add any other variables that you may have created for the other data set (only if you did)
football_managers_2018_season <- group_by(football_managers_2018, season, team) %>%
summarise(
points = sum(points),  # True points
goals = sum(goals),
goals_opponent = sum(goals_opponent),
points_lastseason = mean(points_lastseason),
caretaker = mean(caretaker),
promoted = mean(promoted)
) %>%
ungroup()
# Fit the OLS model
ols.fit3 <- lm(points ~  points_lastseason, data = football_managers_seasons)
# Try your own model - decide which variables to include
# Ensure valid column names
colnames(football_managers_seasons) <- make.names(colnames(football_managers_seasons))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team +  promoted , data = )
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
View(football_managers_2018)
# Aggregate data for 2018
# Don't forget to add any other variables that you may have created for the other data set (only if you did)
football_managers_2018_season <- group_by(football_managers_2018, season, team) %>%
summarise(
points = sum(points),  # True points
goals = sum(goals),
goals_opponent = sum(goals_opponent),
points_lastseason = mean(points_lastseason),
caretaker = mean(caretaker),
promoted = mean(promoted),
manager = manager_name
) %>%
ungroup()
# Fit the OLS model
ols.fit3 <- lm(points ~  points_lastseason, data = football_managers_seasons)
# Try your own model - decide which variables to include
# Ensure valid column names
colnames(football_managers_seasons) <- make.names(colnames(football_managers_seasons))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team +  promoted , data = )
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team +  manager , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team , data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
View(football_managers_2018)
View(football_managers_2018_season)
View(football_managers_2018_season)
View(football_managers_2018_season)
View(football_managers_merged)
View(football_managers_seasons)
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + team + season, data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
# Fit the full model with all predictor variables
full_model <- lm(points ~ points_lastseason^3 + season, data = football_managers_seasons)
# Perform backward selection using the step function
backward_model <- step(full_model, direction = "backward")
# Summary of the final model
summary(backward_model)
# Predict points for the 2018 season using the model
predicted_points_2018 <- predict(full_model, newdata = football_managers_2018_season)
# Calculate the Mean Absolute Error (MAE) manually
true_points_2018 <- football_managers_2018_season$points
mae_value <- mean(abs(true_points_2018 - predicted_points_2018))
# Print the results
print(football_managers_2018_season)
print(paste("Mean Absolute Error (MAE) for the 2018 season and our chosen model: ", mae_value))
View(football_managers_merged)
View(football_managers_merged)
# In case you want to combine both data set, we can create this as follows
football_managers_combined <- bind_rows(football_managers_merged, football_managers_2018)
# In case you haven't done this yet, it's important to create a workable manager_name variable for the aggregate data set
# We need to check whether there were multiple managers in one season and create a unique variable for each team
football_managers_combined$manager_name_clean <- football_managers_combined$manager_name
# Adding count variable
football_managers_combined <- football_managers_combined %>% add_count(manager_name, team, season)
# add new name if mixed team
football_managers_combined$manager_name_clean <- ifelse(
football_managers_combined$n < 38,
paste0("Multiple manager ", football_managers_combined$team),
football_managers_combined$manager_name_clean
)
View(football_managers_combined)
########################## Part A ##########################
# Aggregate data again and keep only one entry per team per season for manager variable
football_managers_seasons <- group_by(football_managers_combined, season, team) %>%
reframe(
points = sum(points),
goals = sum(goals),
promoted = mean(promoted),
goals_opponent = sum(goals_opponent),
points_lastseason = mean(points_lastseason),
team = first(team),
manager_name = first(manager_name_clean),
caretaker = mean(caretaker)
) %>%
as.data.frame()
# Manager performance - simple summary stats and ranking by avg_points
managers_performance_season <- football_managers_seasons %>%
group_by(manager_name) %>%
summarise(
total_points = sum(points),
avg_points = mean(points),
num_seasons = n(),
num_teams = n_distinct(team)
) %>%
arrange(desc(avg_points))  # Rank by average points in descending order
# Print manager performance data
print(managers_performance_season)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason + season, data = football_managers_seasons)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
## Final check for your chosen model
# Normality of residuals for valid inference
# histogram
hist(ols.fit4$residuals)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason^2 + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason^2 + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason^2 + team + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*team + points_lastseason^2 + season, data = football_managers_seasons)
summary(ols.fit4)
## Final check for your chosen model
# Normality of residuals for valid inference
# histogram
hist(ols.fit4$residuals)
# Possible additional graph
qqnorm(ols.fit4$residuals)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*team + points_lastseason^2 + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*team + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name + points_lastseason, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason*season + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season + manager_name, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season + manager_name, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season + manager_name, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + points_lastseason + season + manager_name, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*points_lastseason + season, data = football_managers_seasons)
summary(ols.fit4)
# Fit the OLS model - example
ols.fit4 <- lm(points ~ manager_name*season + points_lastseason, data = football_managers_seasons)
summary(ols.fit4)
